predict(lm2, test) %>% postResample(test$Weekly_Sales) %>% select(RMSE)
predict(lm2, test) %>% postResample(test$Weekly_Sales)[1]
predict(lm2, test) %>% postResample(test$Weekly_Sales) %>% select(1)
predict(lm2, test) %>% postResample(test$Weekly_Sales)
predict(lm2, test) %>% postResample(test$Weekly_Sales) %>% round
predict(lm2, test) %>% postResample(test$Weekly_Sales) %>% round(2)
lm2$results$RMSE #Expected error when run in out-of-sample data
predict(lm2, test) %>% postResample(test$Weekly_Sales) %>% round(2)
#Build a linear model on only training data, let caret handle the cross validation
lm2 <- train(Weekly_Sales ~ .,
train,
method = "lm",
trControl = trainControl(
method = "cv",
number = 10,
repeats = 5,
verboseIter = TRUE
)
lm2
#Expected error in out-of-sample data based only on in-sample data
lm2$results$RMSE
#Actual error in out-of-sample data
predict(lm2, test) %>% postResample(test$Weekly_Sales) %>% round(2)
getModelInfo("lm")
lm <- train(Weekly_Sales ~ .,
df,
method = "lm",
trControl = trainControl(
method = "boot632",
number = 25,
verboseIter = TRUE
)
lm <- train(Weekly_Sales ~ .,
df,
method = "lm",
trControl = trainControl(
method = "boot632",
number = 10,
verboseIter = TRUE
)
lm
lm$results$RMSE
lm
lm$results$RMSE
lm1$results$RMSE
predict(lm2, test) %>% postResample(test$Weekly_Sales) %>% round(2)
lm2$results$RMSE
summary(df$Type)
df %>% select(Type) %>% factor %>% summary
df %>% select(Type) %>% factor
df %>% select(Type) %>% unlist %>% factor %>% summary
df %>%
mutate(Store = map_df(select(df, Store), factor),
Dept = map_df(select(df, Dept), factor),
Type = map_df(select(df, Type), factor),
Holiday = map_df(select(df, Holiday), factor))
df %>%
mutate(Store = map(select(df, Store), factor),
Dept = map(select(df, Dept), factor),
Type = map(select(df, Type), factor),
Holiday = map(select(df, Holiday), factor))
df
df %>%
mutate(Store = map(select(df, Store), parse_factor),
Dept = map(select(df, Dept), parse_factor),
Type = map(select(df, Type), parse_factor),
Holiday = map(select(df, Holiday), parse_factor))
map(select(df, Store), parse_factor)
df %>%
map_if(Store, NA)
df %>%
map_if(contains(Store), NA)
df %>%
map_at(c(Store), NA)
df %>%
map_at(c("Store"), NA)
df %>%
map_at(c("Store", "Dept", "Type", "Holiday"), as.factor)
df %>%
map_at(c("Store", "Dept", "Type", "Holiday"), as.factor) %>%
as_tibble
df %<>%
map_at(c("Store", "Dept", "Type", "Holiday"), as.factor) %>%
as_tibble
library(magrittr)
library(tidyverse)
library(caret)
set.seed(1234)
df <- read_csv("data/full_data.csv") %>% select(-index)
df %<>%
map_at(c("Store", "Dept", "Type", "Holiday"), as.factor) %>%
as_tibble
train <- sample_frac(df, .7)
test <- setdiff(df, train)
library(magrittr)
library(tidyverse)
library(caret)
set.seed(1234)
df <- read_csv("data/full_data.csv") %>% select(-index)
df %<>%
map_at(c("Store", "Dept", "Type", "Holiday"), as.factor) %>%
as_tibble
train <- sample_frac(df, .7)
test <- setdiff(df, train)
#Build a linear model on all data, let caret handle the boostrapping
lm <- train(Weekly_Sales ~ .,
df,
method = "lm",
trControl = trainControl(
method = "boot632", #more bias, less variance than k-fold cv, may underfit
number = 10,
verboseIter = TRUE
)
library(magrittr)
library(tidyverse)
library(caret)
set.seed(1234)
df <- read_csv("data/full_data.csv") %>% select(-index)
df %<>%
map_at(c("Store", "Dept", "Type", "Holiday"), as.factor) %>%
as_tibble
train <- sample_frac(df, .7)
test <- setdiff(df, train)
#Build a linear model on all data, let caret handle the boostrapping
lm <- train(Weekly_Sales ~ .,
df,
method = "lm",
trControl = trainControl(
method = "boot632", #more bias, less variance than k-fold cv, may underfit
number = 10,
verboseIter = TRUE
)
lm
lm$results$RMSE
#Build a linear model on all data, let caret handle the cross validation
lm1 <- train(Weekly_Sales ~ .,
df,
method = "lm",
trControl = trainControl(
method = "repeatedcv", #less bias, more variance than boostrapping, may overfit
number = 10,
verboseIter = TRUE
)
lm1
lm1$results$RMSE
lm %>% names
lm$times %>% names
lm$times$everything
lm$times$everything$elapsed
lm$times$everything$elapsed[3]
lm$times$everything$elapsed
lm$times$everything
lm$times$everything[3]
lm1$times$everything[3]
#Build a linear model on only training data
lm2 <- train(Weekly_Sales ~ .,
train,
method = "lm",
trControl = trainControl(
method = "cv",
number = 10,
repeats = 5,
verboseIter = TRUE
)
#Build a linear model on only training data
lm2 <- train(Weekly_Sales ~ .,
train,
method = "lm",
trControl = trainControl(
method = "cv",
number = 10,
repeats = 5
)
lm2
#Expected error in out-of-sample data based only on in-sample data
lm2$results$RMSE
#Actual error in out-of-sample data
predict(lm2, test) %>% postResample(test$Weekly_Sales) %>% round(2)
trControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = T
)
glm <- train(IsHoliday ~ .,
train,
method = "glm",
trControl = trControl
)
trControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = T
)
glm <- train(IsHoliday ~ .,
train,
method = "glm",
trControl = trControl,
metric = "accuracy"
)
glm <- train(y = select(df, IsHoliday),
x = select(df, -IsHoliday),
method = "glm",
trControl = trControl,
metric = "accuracy"
)
select(df, IsHoliday) %>% nrow
select(df, -IsHoliday) %>% nrow
glm <- train(y = unlist(select(df, IsHoliday)),
x = select(df, -IsHoliday),
method = "glm",
trControl = trControl,
metric = "accuracy"
)
glm <- train(y = unlist(select(df, IsHoliday)),
x = unlist(select(df, -IsHoliday)),
method = "glm",
trControl = trControl,
metric = "accuracy"
)
y <- df %>% select(IsHoliday) %>% unlist
x <- df %>% select(-IsHolidat) %>% unlist
df %>% select(IsHoliday) %>% unlist
df %>% select(IsHoliday) %>% as.vector
df %>% select(IsHoliday) %>% as.vector %>% unlist
df %>% select(IsHoliday)
df %>% select(IsHoliday) %>% as.numeric
df %>% select(IsHoliday) %>% as.integer()
df %>% select(IsHoliday) %>% factor
df %>% select(IsHoliday) %>% as.factor
df$IsHoliday
df$IsHoliday %>% as.numeric
df[,-"IsHoliday"]
df[,!"IsHoliday"]
y <- df$IsHoliday %>% as.numeric
x <- df %>% select(-IsHoliday)
glm <- train(y = y,
x = x,
method = "glm",
trControl = trControl,
metric = "accuracy"
)
df$IsHoliday %>% as.factor
y <- df$IsHoliday
x <- df %>% select(-IsHoliday)
glm <- train(y = y,
x = x,
method = "glm",
family = "binomial",
trControl = trControl,
metric = "accuracy"
)
df$IsHoliday
df$IsHoliday %>% factor
y <- df$IsHoliday %>% factor
x <- df %>% select(-IsHoliday)
glm <- train(y = y,
x = x,
method = "glm",
family = "binomial",
trControl = trControl,
metric = "accuracy"
)
y <- df[,"IsHoliday"]
x <- df %>% select(-IsHoliday)
glm <- train(y = y,
x = x,
method = "glm",
family = "binomial",
trControl = trControl,
metric = "accuracy"
)
df[,"IsHoliday"]
df %>% select(-IsHoliday)
y <- df %>% select(IsHoliday)
x <- df %>% select(-IsHoliday)
glm <- train(y = y,
x = x,
method = "glm",
family = "binomial",
trControl = trControl,
metric = "accuracy"
)
y <- df %>% select(IsHoliday) %>% as_data_frame
x <- df %>% select(-IsHoliday) %>% as_data_frame
glm <- train(y = y,
x = x,
method = "glm",
family = "binomial",
trControl = trControl,
metric = "accuracy"
)
df %>% select(IsHoliday) %>% make.names
glm <- train(IsHoliday ~ .,
df,
method = "glm",
family = "binomial",
trControl = trControl,
metric = "accuracy"
)
y <- df %>% select(IsHoliday) %>% unlist
x <- df %>% select(-IsHoliday) %>% unlist
glm <- train(y = y,
x = x,
method = "glm",
family = "binomial",
trControl = trControl,
metric = "accuracy"
)
df %>% select(-IsHoliday) %>% unlist
y <- df %>% select(IsHoliday) %>% as.data.frame
x <- df %>% select(-IsHoliday) %>% as.data.frame
glm <- train(y = y,
x = x,
method = "glm",
family = "binomial",
trControl = trControl,
metric = "accuracy"
)
df %>% select(IsHoliday) %>% as.data.frame
df %>% select(-IsHoliday) %>% as.data.frame
df %>% unlist
which(names(df) == "IsHoliday")
which(names(df) != "IsHoliday")
y <- df[,which(names(df) == "IsHoliday")]
x <- df[,which(names(df) != "IsHoliday")]
glm <- train(y = y,
x = x,
method = "glm",
family = "binomial",
trControl = trControl,
metric = "accuracy"
)
df[,which(names(df) == "IsHoliday")]
df[,which(names(df) != "IsHoliday")]
library(magrittr)
library(tidyverse)
library(caret)
set.seed(1234)
df <- read_csv("data/full_data.csv") %>% select(-index)
df %<>%
map_at(c("Store", "Dept", "Type", "Holiday"), as.factor) %>%
as_tibble
train <- sample_frac(df, .7)
test <- setdiff(df, train)
rm(train, test)
trControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = T
)
y <- df[,which(names(df) == "IsHoliday")]
x <- df[,which(names(df) != "IsHoliday")]
glm <- train(y = y,
x = x,
method = "glm",
family = "binomial",
trControl = trControl,
metric = "accuracy"
)
df[,which(names(df) == "IsHoliday")] %>% class
df[,which(names(df) == "IsHoliday")] %>% as.vector
y <- df[,which(names(df) == "IsHoliday")] %>% as.vector
x <- df[,which(names(df) != "IsHoliday")]
glm <- train(y = y,
x = x,
method = "glm",
family = "binomial",
trControl = trControl,
metric = "accuracy"
)
df[,which(names(df) == "IsHoliday")] %>% as.factor
df[,which(names(df) == "IsHoliday")] %>% typeof
df[,which(names(df) == "IsHoliday")] %>% unlist
y <- df[,which(names(df) == "IsHoliday")] %>% unlist
x <- df[,which(names(df) != "IsHoliday")]
glm <- train(y = y,
x = x,
method = "glm",
family = "binomial",
trControl = trControl,
metric = "accuracy"
)
df[,which(names(df) == "IsHoliday")] %>% unlist %>% as.vector
y <- df[,which(names(df) == "IsHoliday")] %>% unlist %>% as.vector
x <- df[,which(names(df) != "IsHoliday")]
glm <- train(y = y,
x = x,
method = "glm",
family = "binomial",
trControl = trControl,
metric = "accuracy"
)
df[,which(names(df) == "IsHoliday")] %>% unlist %>% as.vector %>% class
df[,which(names(df) != "IsHoliday")] %>% class
df[,which(names(df) != "IsHoliday")] %>% unlist %>% class
df[,which(names(df) != "IsHoliday")] %>% as.matrix
y <- df[,which(names(df) == "IsHoliday")] %>% unlist %>% as.vector
x <- df[,which(names(df) != "IsHoliday")] %>% as.matrix
glm <- train(y = y,
x = x,
method = "glm",
family = "binomial",
trControl = trControl,
metric = "accuracy"
)
glm_data <- df %>%
select(Weekly_Sales, Store, Dept, Type, Size, Temperature, Fuel_Price, CPI, Unemployment, Holiday, Month, Year, Quarter)
glm_data <- df %>%
select(Weekly_Sales, Store, Dept, Type, Size, Temperature, Fuel_Price, CPI, Unemployment, Holiday, Month, Year, Quarter)
TrainData <- glm_data[,1]
TrainClasses <- glm_data[,2:13]
trControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = T
)
glm <- train(y = TrainData,
x = TrainClasses,
method = "glm",
family = "binomial",
trControl = trControl,
metric = "accuracy"
)
glm_data <- df %>%
select(Weekly_Sales, Store, Dept, Type, Size, Temperature, Fuel_Price, CPI, Unemployment, Holiday, Month, Year, Quarter) %>% as_data_frame
TrainData <- glm_data[,1]
TrainClasses <- glm_data[,2:13]
trControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = T
)
glm <- train(y = TrainData,
x = TrainClasses,
method = "glm",
family = "binomial",
trControl = trControl,
metric = "accuracy"
)
TrainClasses %>% nrow
TrainData %>% nrow
TrainData %>% n()
TrainData %>% count()
any(is.na(TrainClasses))
glm_data <- df %>%
select(Weekly_Sales, Store, Dept, Type, Size, Temperature, Fuel_Price, CPI, Unemployment, Holiday, Month, Year, Quarter)
TrainData <- glm_data[,1]
TrainClasses <- glm_data[,2:13]
trControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = T
)
glm <- train(y = TrainData,
x = TrainClasses,
method = "glmStepAIC",
family = "binomial",
trControl = trControl,
metric = "accuracy"
)
trControl <- trainControl(
method = "cv",
number = 10,
summaryFunction = twoClassSummary,
classProbs = T
)
glm <- train(Weekly_Sales ~ .,
glm_data,
method = "glmStepAIC",
family = "binomial",
trControl = trControl,
metric = "accuracy"
)
df$Weekly_Sales %>% ggplot(aes(Weekly_Sales)) + geom_density()
df %>% ggplot(aes(Weekly_Sales)) + geom_density()
df %>% ggplot(aes(log(Weekly_Sales))) + geom_density()
exp(5)
min(df$Weekly_Sales)
df$Weekly_Sales < 0 %>%  sum
(df$Weekly_Sales < 0) %>%  sum
df %>% filter(Weekly_Sales < 0) %>% ggplot(aes(log(Weekly_Sales))) + geom_density()
df %>% filter(Weekly_Sales < 0) %>% ggplot(aes(Weekly_Sales)) + geom_density()
df %>% filter(Weekly_Sales < 0)
df %>% filter(Weekly_Sales < 0) %>% sum
df %>% filter(Weekly_Sales < 0) %>% count
df %>% group_by(Store) %>% filter(Weekly_Sales < 0) %>% count
df %>% group_by(Dept) %>% filter(Weekly_Sales < 0) %>% count
df %>% group_by(Month) %>% filter(Weekly_Sales < 0) %>% count
df %>% group_by(Date) %>% filter(Weekly_Sales < 0) %>% count
df %>% group_by(Type) %>% filter(Weekly_Sales < 0) %>% count
df %>% group_by(Size) %>% filter(Weekly_Sales < 0) %>% count
df %>% group_by(Quarter) %>% filter(Weekly_Sales < 0) %>% count
df %>% group_by(Holiday) %>% filter(Weekly_Sales < 0) %>% count
df %>% select(Weekly_Sales) %>% exp
df %>% select(Weekly_Sales) %>% mutate(sales = exp(Weekly_Sales))
exp(df$Weekly_Sales[1])
df$Weekly_Sales[1]
TrainData <- df %>% select(Weekly_Sales) %>% mutate(Weekly_Sales = Weekly_Sales < 0)
df %>% select(Weekly_Sales)
df
df %>% select(Weekly_Sales)
library(magrittr)
library(tidyverse)
library(caret)
set.seed(1234)
df <- read_csv("data/full_data.csv") %>% select(-index)
